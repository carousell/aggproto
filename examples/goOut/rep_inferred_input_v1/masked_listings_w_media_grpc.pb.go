// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rep_inferred_input_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaskedListingsWMediaServiceClient is the client API for MaskedListingsWMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaskedListingsWMediaServiceClient interface {
	InvokeMaskedListingsWMedia(ctx context.Context, in *MaskedListingsWMediaRequest, opts ...grpc.CallOption) (*MaskedListingsWMediaResponse, error)
}

type maskedListingsWMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaskedListingsWMediaServiceClient(cc grpc.ClientConnInterface) MaskedListingsWMediaServiceClient {
	return &maskedListingsWMediaServiceClient{cc}
}

func (c *maskedListingsWMediaServiceClient) InvokeMaskedListingsWMedia(ctx context.Context, in *MaskedListingsWMediaRequest, opts ...grpc.CallOption) (*MaskedListingsWMediaResponse, error) {
	out := new(MaskedListingsWMediaResponse)
	err := c.cc.Invoke(ctx, "/rep_inferred_input_v1.MaskedListingsWMediaService/InvokeMaskedListingsWMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaskedListingsWMediaServiceServer is the server API for MaskedListingsWMediaService service.
// All implementations must embed UnimplementedMaskedListingsWMediaServiceServer
// for forward compatibility
type MaskedListingsWMediaServiceServer interface {
	InvokeMaskedListingsWMedia(context.Context, *MaskedListingsWMediaRequest) (*MaskedListingsWMediaResponse, error)
	mustEmbedUnimplementedMaskedListingsWMediaServiceServer()
}

// UnimplementedMaskedListingsWMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaskedListingsWMediaServiceServer struct {
}

func (UnimplementedMaskedListingsWMediaServiceServer) InvokeMaskedListingsWMedia(context.Context, *MaskedListingsWMediaRequest) (*MaskedListingsWMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMaskedListingsWMedia not implemented")
}
func (UnimplementedMaskedListingsWMediaServiceServer) mustEmbedUnimplementedMaskedListingsWMediaServiceServer() {
}

// UnsafeMaskedListingsWMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaskedListingsWMediaServiceServer will
// result in compilation errors.
type UnsafeMaskedListingsWMediaServiceServer interface {
	mustEmbedUnimplementedMaskedListingsWMediaServiceServer()
}

func RegisterMaskedListingsWMediaServiceServer(s grpc.ServiceRegistrar, srv MaskedListingsWMediaServiceServer) {
	s.RegisterService(&MaskedListingsWMediaService_ServiceDesc, srv)
}

func _MaskedListingsWMediaService_InvokeMaskedListingsWMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaskedListingsWMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaskedListingsWMediaServiceServer).InvokeMaskedListingsWMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep_inferred_input_v1.MaskedListingsWMediaService/InvokeMaskedListingsWMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaskedListingsWMediaServiceServer).InvokeMaskedListingsWMedia(ctx, req.(*MaskedListingsWMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaskedListingsWMediaService_ServiceDesc is the grpc.ServiceDesc for MaskedListingsWMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaskedListingsWMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rep_inferred_input_v1.MaskedListingsWMediaService",
	HandlerType: (*MaskedListingsWMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeMaskedListingsWMedia",
			Handler:    _MaskedListingsWMediaService_InvokeMaskedListingsWMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rep_inferred_input_v1/masked_listings_w_media.proto",
}
