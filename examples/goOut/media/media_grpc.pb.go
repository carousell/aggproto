// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error)
	BulkGetMedia(ctx context.Context, in *BulkGetMediaRequest, opts ...grpc.CallOption) (*BulkGetMediaResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error) {
	out := new(GetMediaResponse)
	err := c.cc.Invoke(ctx, "/media.MediaService/GetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) BulkGetMedia(ctx context.Context, in *BulkGetMediaRequest, opts ...grpc.CallOption) (*BulkGetMediaResponse, error) {
	out := new(BulkGetMediaResponse)
	err := c.cc.Invoke(ctx, "/media.MediaService/BulkGetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility
type MediaServiceServer interface {
	GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error)
	BulkGetMedia(context.Context, *BulkGetMediaRequest) (*BulkGetMediaResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaServiceServer struct {
}

func (*UnimplementedMediaServiceServer) GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (*UnimplementedMediaServiceServer) BulkGetMedia(context.Context, *BulkGetMediaRequest) (*BulkGetMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGetMedia not implemented")
}
func (*UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}

func RegisterMediaServiceServer(s *grpc.Server, srv MediaServiceServer) {
	s.RegisterService(&_MediaService_serviceDesc, srv)
}

func _MediaService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.MediaService/GetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_BulkGetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).BulkGetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.MediaService/BulkGetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).BulkGetMedia(ctx, req.(*BulkGetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "media.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMedia",
			Handler:    _MediaService_GetMedia_Handler,
		},
		{
			MethodName: "BulkGetMedia",
			Handler:    _MediaService_BulkGetMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/media.proto",
}
