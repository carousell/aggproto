// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple_mask_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaskedListingServiceClient is the client API for MaskedListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaskedListingServiceClient interface {
	InvokeMaskedListing(ctx context.Context, in *MaskedListingRequest, opts ...grpc.CallOption) (*MaskedListingResponse, error)
}

type maskedListingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaskedListingServiceClient(cc grpc.ClientConnInterface) MaskedListingServiceClient {
	return &maskedListingServiceClient{cc}
}

func (c *maskedListingServiceClient) InvokeMaskedListing(ctx context.Context, in *MaskedListingRequest, opts ...grpc.CallOption) (*MaskedListingResponse, error) {
	out := new(MaskedListingResponse)
	err := c.cc.Invoke(ctx, "/simple_mask_v1.MaskedListingService/InvokeMaskedListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaskedListingServiceServer is the server API for MaskedListingService service.
// All implementations must embed UnimplementedMaskedListingServiceServer
// for forward compatibility
type MaskedListingServiceServer interface {
	InvokeMaskedListing(context.Context, *MaskedListingRequest) (*MaskedListingResponse, error)
	mustEmbedUnimplementedMaskedListingServiceServer()
}

// UnimplementedMaskedListingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaskedListingServiceServer struct {
}

func (UnimplementedMaskedListingServiceServer) InvokeMaskedListing(context.Context, *MaskedListingRequest) (*MaskedListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMaskedListing not implemented")
}
func (UnimplementedMaskedListingServiceServer) mustEmbedUnimplementedMaskedListingServiceServer() {}

// UnsafeMaskedListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaskedListingServiceServer will
// result in compilation errors.
type UnsafeMaskedListingServiceServer interface {
	mustEmbedUnimplementedMaskedListingServiceServer()
}

func RegisterMaskedListingServiceServer(s grpc.ServiceRegistrar, srv MaskedListingServiceServer) {
	s.RegisterService(&MaskedListingService_ServiceDesc, srv)
}

func _MaskedListingService_InvokeMaskedListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaskedListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaskedListingServiceServer).InvokeMaskedListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_mask_v1.MaskedListingService/InvokeMaskedListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaskedListingServiceServer).InvokeMaskedListing(ctx, req.(*MaskedListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaskedListingService_ServiceDesc is the grpc.ServiceDesc for MaskedListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaskedListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple_mask_v1.MaskedListingService",
	HandlerType: (*MaskedListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeMaskedListing",
			Handler:    _MaskedListingService_InvokeMaskedListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple_mask_v1/masked_listing.proto",
}
