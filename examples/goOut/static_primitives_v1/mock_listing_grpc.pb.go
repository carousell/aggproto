// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package static_primitives_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MockListingServiceClient is the client API for MockListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockListingServiceClient interface {
	InvokeMockListing(ctx context.Context, in *MockListingRequest, opts ...grpc.CallOption) (*MockListingResponse, error)
}

type mockListingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockListingServiceClient(cc grpc.ClientConnInterface) MockListingServiceClient {
	return &mockListingServiceClient{cc}
}

func (c *mockListingServiceClient) InvokeMockListing(ctx context.Context, in *MockListingRequest, opts ...grpc.CallOption) (*MockListingResponse, error) {
	out := new(MockListingResponse)
	err := c.cc.Invoke(ctx, "/static_primitives_v1.MockListingService/InvokeMockListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockListingServiceServer is the server API for MockListingService service.
// All implementations must embed UnimplementedMockListingServiceServer
// for forward compatibility
type MockListingServiceServer interface {
	InvokeMockListing(context.Context, *MockListingRequest) (*MockListingResponse, error)
	mustEmbedUnimplementedMockListingServiceServer()
}

// UnimplementedMockListingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMockListingServiceServer struct {
}

func (*UnimplementedMockListingServiceServer) InvokeMockListing(context.Context, *MockListingRequest) (*MockListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMockListing not implemented")
}
func (*UnimplementedMockListingServiceServer) mustEmbedUnimplementedMockListingServiceServer() {}

func RegisterMockListingServiceServer(s *grpc.Server, srv MockListingServiceServer) {
	s.RegisterService(&_MockListingService_serviceDesc, srv)
}

func _MockListingService_InvokeMockListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockListingServiceServer).InvokeMockListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/static_primitives_v1.MockListingService/InvokeMockListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockListingServiceServer).InvokeMockListing(ctx, req.(*MockListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockListingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "static_primitives_v1.MockListingService",
	HandlerType: (*MockListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeMockListing",
			Handler:    _MockListingService_InvokeMockListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "static_primitives_v1/mock_listing.proto",
}
