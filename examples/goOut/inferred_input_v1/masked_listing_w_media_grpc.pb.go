// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inferred_input_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaskedListingWMediaServiceClient is the client API for MaskedListingWMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaskedListingWMediaServiceClient interface {
	InvokeMaskedListingWMedia(ctx context.Context, in *MaskedListingWMediaRequest, opts ...grpc.CallOption) (*MaskedListingWMediaResponse, error)
}

type maskedListingWMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaskedListingWMediaServiceClient(cc grpc.ClientConnInterface) MaskedListingWMediaServiceClient {
	return &maskedListingWMediaServiceClient{cc}
}

func (c *maskedListingWMediaServiceClient) InvokeMaskedListingWMedia(ctx context.Context, in *MaskedListingWMediaRequest, opts ...grpc.CallOption) (*MaskedListingWMediaResponse, error) {
	out := new(MaskedListingWMediaResponse)
	err := c.cc.Invoke(ctx, "/inferred_input_v1.MaskedListingWMediaService/InvokeMaskedListingWMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaskedListingWMediaServiceServer is the server API for MaskedListingWMediaService service.
// All implementations must embed UnimplementedMaskedListingWMediaServiceServer
// for forward compatibility
type MaskedListingWMediaServiceServer interface {
	InvokeMaskedListingWMedia(context.Context, *MaskedListingWMediaRequest) (*MaskedListingWMediaResponse, error)
	mustEmbedUnimplementedMaskedListingWMediaServiceServer()
}

// UnimplementedMaskedListingWMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaskedListingWMediaServiceServer struct {
}

func (UnimplementedMaskedListingWMediaServiceServer) InvokeMaskedListingWMedia(context.Context, *MaskedListingWMediaRequest) (*MaskedListingWMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMaskedListingWMedia not implemented")
}
func (UnimplementedMaskedListingWMediaServiceServer) mustEmbedUnimplementedMaskedListingWMediaServiceServer() {
}

// UnsafeMaskedListingWMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaskedListingWMediaServiceServer will
// result in compilation errors.
type UnsafeMaskedListingWMediaServiceServer interface {
	mustEmbedUnimplementedMaskedListingWMediaServiceServer()
}

func RegisterMaskedListingWMediaServiceServer(s grpc.ServiceRegistrar, srv MaskedListingWMediaServiceServer) {
	s.RegisterService(&MaskedListingWMediaService_ServiceDesc, srv)
}

func _MaskedListingWMediaService_InvokeMaskedListingWMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaskedListingWMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaskedListingWMediaServiceServer).InvokeMaskedListingWMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inferred_input_v1.MaskedListingWMediaService/InvokeMaskedListingWMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaskedListingWMediaServiceServer).InvokeMaskedListingWMedia(ctx, req.(*MaskedListingWMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaskedListingWMediaService_ServiceDesc is the grpc.ServiceDesc for MaskedListingWMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaskedListingWMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inferred_input_v1.MaskedListingWMediaService",
	HandlerType: (*MaskedListingWMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeMaskedListingWMedia",
			Handler:    _MaskedListingWMediaService_InvokeMaskedListingWMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inferred_input_v1/masked_listing_w_media.proto",
}
