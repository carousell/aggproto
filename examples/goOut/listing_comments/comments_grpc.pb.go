// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package listing_comments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListingCommentsClient is the client API for ListingComments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingCommentsClient interface {
	GetListingComments(ctx context.Context, in *GetListingCommentsRequest, opts ...grpc.CallOption) (*GetListingCommentsResponse, error)
}

type listingCommentsClient struct {
	cc grpc.ClientConnInterface
}

func NewListingCommentsClient(cc grpc.ClientConnInterface) ListingCommentsClient {
	return &listingCommentsClient{cc}
}

func (c *listingCommentsClient) GetListingComments(ctx context.Context, in *GetListingCommentsRequest, opts ...grpc.CallOption) (*GetListingCommentsResponse, error) {
	out := new(GetListingCommentsResponse)
	err := c.cc.Invoke(ctx, "/listing_comments.ListingComments/GetListingComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingCommentsServer is the server API for ListingComments service.
// All implementations must embed UnimplementedListingCommentsServer
// for forward compatibility
type ListingCommentsServer interface {
	GetListingComments(context.Context, *GetListingCommentsRequest) (*GetListingCommentsResponse, error)
	mustEmbedUnimplementedListingCommentsServer()
}

// UnimplementedListingCommentsServer must be embedded to have forward compatible implementations.
type UnimplementedListingCommentsServer struct {
}

func (UnimplementedListingCommentsServer) GetListingComments(context.Context, *GetListingCommentsRequest) (*GetListingCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingComments not implemented")
}
func (UnimplementedListingCommentsServer) mustEmbedUnimplementedListingCommentsServer() {}

// UnsafeListingCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingCommentsServer will
// result in compilation errors.
type UnsafeListingCommentsServer interface {
	mustEmbedUnimplementedListingCommentsServer()
}

func RegisterListingCommentsServer(s grpc.ServiceRegistrar, srv ListingCommentsServer) {
	s.RegisterService(&ListingComments_ServiceDesc, srv)
}

func _ListingComments_GetListingComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingCommentsServer).GetListingComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing_comments.ListingComments/GetListingComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingCommentsServer).GetListingComments(ctx, req.(*GetListingCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingComments_ServiceDesc is the grpc.ServiceDesc for ListingComments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingComments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listing_comments.ListingComments",
	HandlerType: (*ListingCommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListingComments",
			Handler:    _ListingComments_GetListingComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listing_comments/comments.proto",
}
